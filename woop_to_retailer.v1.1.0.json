{
  "openapi": "3.0.2",
  "info": {
    "title": "Woop vers Enseigne",
    "description": "Pour commencer, toutes les informations technique concernant les API Woop à destination des enseignes sont centralisées dans cette documentation. Pour toute question ou précision, merci de contacter l'équipe technique interne. \n\nPour utiliser les API \"Woop vers Enseigne\", vous devez vous munir des vos accès identifiants secret fournis lors de la création de votre compte enseigne au sein de la palteforme. \n\nLa version actuellement proposée dans la documentation est la <b>Version 1.4.0</b>",
    "version": "1.1.1"
  },
  "tags": [
    {
      "name": "Commande"
    },
    {
      "name": "Collecte"
    }
  ],
  "paths": {
    "/orders/{orderId}/carrier": {
      "put": {
        "tags": [
          "Commande"
        ],
        "operationId": "putOrderCarrier",
        "description": "Cette méthode permet de recevoir le nom du transporteur sélectionné pour une commande donnée. \n\nLorsque le choix du transporteur assurant la livraison de la commande est établi, l'information est envoyée. ",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathOrderId"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Contient les informations du transporteur sélectionné.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "deliveryId": {
                    "type": "string",
                    "description": "Identifiant de livraison"
                  },
                  "externalReference": {
                    "type": "string",
                    "description": "Référence de commmande"
                  },
                  "orderId": {
                    "type": "string",
                    "description": "Identifiant de commande"
                  },
                  "trackingPageUrl": {
                    "type": "string",
                    "description": "Lien de la page de suivi de la livraison"
                  },
                  "vehicleType": {
                    "$ref": "#/components/schemas/vehicleType"
                  },
                  "price": {
                    "$ref": "#/components/schemas/price"
                  },
                  "carrier": {
                    "$ref": "#/components/schemas/carrier"
                  }
                },
                "required": [
                  "deliveryId",
                  "orderId",
                  "trackingPageUrl",
                  "vehicleType",
                  "price",
                  "carrier"
                ]
              },
              "examples": {
                "Exemple": {
                  "value": {
                    "deliveryId": "4qz64zd5qdq",
                    "externalReference": "6546465-FH",
                    "orderId": "zd8qz4dq4dz6q",
                    "trackingPageUrl": "https://url_suivi_livraison",
                    "vehicleType": "VEHICLE_TYPE_BIKE",
                    "price": {
                      "value": 36.5,
                      "currency": "EUR"
                    },
                    "carrier": {
                      "name": "Transporteur A",
                      "code": "transporteur-a",
                      "contact": {
                        "firstName": "Michel",
                        "lastName": "Dupont",
                        "phone": "+33600000000",
                        "email": "michel.dupont@mail.fr"
                      },
                      "specifications": {
                        "updateOrder": true,
                        "cancelOrder": false,
                        "carrierLabel": true,
                        "storageCapacity": true,
                        "weightMin": {
                          "value": 5,
                          "unit": "kg"
                        },
                        "weightMax": {
                          "value": 50,
                          "unit": "kg"
                        },
                        "ditanceMax": {
                          "value": 5,
                          "unit": "m"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Requête traitée avec succès"
          },
          "400": {
            "description": "Elements manquants et/ou incorrect dans le body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "Missing argument 'xxxxx'"
                      }
                    }
                  }
                },
                "examples": {
                  "Exemple": {
                    "value": {
                      "reasons": [
                        "Missing argument 'xxxxx'"
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "L'information ne peut plus être envoyée",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.v1.4.0.json#/components/schemas/errorCode"
                },
                "examples": {
                  "example": {
                    "value": {
                      "statusCode": 403,
                      "error": "Forbidden",
                      "message": "Store doesn't exist or is inactive"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Le 'orderId' n'a pas été trouvé",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.v1.4.0.json#/components/schemas/errorCode"
                },
                "examples": {
                  "example": {
                    "value": {
                      "statusCode": 404,
                      "error": "Not Found",
                      "message": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Recevoir le nom du transporteur sélectionné pour une commande"
      }
    },
    "/orders/{orderId}/status": {
      "put": {
        "tags": [
          "Commande"
        ],
        "operationId": "putOrderStatus",
        "description": "Cette méthode permet à l’enseigne de recevoir les mises à jour des statuts de livraison de la part du transporteur pour une commande donnée.  \n\nL’enseigne pourra alors suivre en temps réel l’évolution de la livraison dans le temps. ",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathOrderId"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Contient les informations du changement de statut.",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/putOrderStatus"
                  },
                  {
                    "$ref": "#/components/schemas/putDeliveryStatus"
                  }
                ]
              },
              "examples": {
                "Statut de commande": {
                  "value": {
                    "orderId": "5z8d4q465zdq65d",
                    "status": "ORDER_CREATED",
                    "date": "2019-11-27T12:00:00+0000"
                  }
                },
                "Statut de livraison": {
                  "value": {
                    "deliveryId": "kzqfq41q561gq5ge1q5",
                    "orderId": "5z8d4q465zdq65d",
                    "status": "DELIVERY_STARTED",
                    "date": "2019-11-27T12:00:00+0000",
                    "comment": "Ceci est un commentaire utile.",
                    "team": {
                      "members": [
                        {
                          "id": "q6z4qz4dq"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Requête traitée avec succès"
          },
          "400": {
            "description": "Elements manquants et/ou incorrect dans le body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "Missing argument 'xxxxx'"
                      }
                    }
                  }
                },
                "examples": {
                  "Exemple": {
                    "value": {
                      "reasons": [
                        "Missing argument 'xxxxx'"
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "L'information ne peut plus être envoyée",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.v1.4.0.json#/components/schemas/errorCode"
                },
                "examples": {
                  "example": {
                    "value": {
                      "statusCode": 403,
                      "error": "Forbidden",
                      "message": "Store doesn't exist or is inactive"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Le 'orderId' n'a pas été trouvé",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.v1.4.0.json#/components/schemas/errorCode"
                },
                "examples": {
                  "example": {
                    "value": {
                      "statusCode": 404,
                      "error": "Not Found",
                      "message": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Recevoir les mises à jour de statut de livraison"
      }
    },
    "/orders/{orderId}/score": {
      "put": {
        "tags": [
          "Commande"
        ],
        "operationId": "putOrderScore",
        "description": "Cette méthode permet de recevoir les retours client suite à la livraison.",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathOrderId"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Contient les informations de la note.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "orderId": {
                    "type": "string",
                    "description": "Identifiant de commande"
                  },
                  "score": {
                    "type": "array",
                    "description": "Note de la livraison",
                    "items": {
                      "$ref": "#/components/schemas/score"
                    }
                  },
                  "comment": {
                    "type": "array",
                    "description": "Commentaires clients",
                    "items": {
                      "$ref": "#/components/schemas/scoreComment"
                    }
                  }
                },
                "required": [
                  "orderId",
                  "score",
                  "comment"
                ]
              },
              "examples": {
                "Exemple": {
                  "value": {
                    "orderId": "54s54z65z4r14e6",
                    "score": [
                      {
                        "note": 9,
                        "type": "SCORE_TYPE_SATISFACTION",
                        "includedInCarrierScore": true
                      }
                    ],
                    "comment": [
                      {
                        "answer": "Non, livraison correcte.",
                        "question": "Avez-vous des suggestions à nous partager afin de nous aider à améliorer notre service de livraison ?"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Requête traitée avec succès"
          },
          "400": {
            "description": "Elements manquants et/ou incorrect dans le body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "Missing argument 'xxxxx'"
                      }
                    }
                  }
                },
                "examples": {
                  "Exemple": {
                    "value": {
                      "reasons": [
                        "Missing argument 'xxxxx'"
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "L'information ne peut plus être envoyée",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.v1.4.0.json#/components/schemas/errorCode"
                },
                "examples": {
                  "example": {
                    "value": {
                      "statusCode": 403,
                      "error": "Forbidden",
                      "message": "Store doesn't exist or is inactive"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Le 'orderId' n'a pas été trouvé",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.v1.4.0.json#/components/schemas/errorCode"
                },
                "examples": {
                  "example": {
                    "value": {
                      "statusCode": 404,
                      "error": "Not Found",
                      "message": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Recevoir les notes du transporteur pour une livraison"
      }
    },
    "/orders/{orderId}/deliveryClosure": {
      "post": {
        "tags": [
          "Commande"
        ],
        "operationId": "postOrderDeliveryClosure",
        "description": "Cette méthode permet de recevoir les informations de facturation pour une livraison donnée.",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathOrderId"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Contient les informations de facturation.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "deliveryId": {
                    "type": "string",
                    "description": "Identifiant de la livraison"
                  },
                  "externalReference": {
                    "type": "string",
                    "description": "Référence de commande"
                  },
                  "orderId": {
                    "type": "string",
                    "description": "Identifiant de commmande"
                  },
                  "billedDistance": {
                    "$ref": "#/components/schemas/length"
                  },
                  "emittedCarbonDioxide": {
                    "$ref": "#/components/schemas/mass"
                  },
                  "vehicleType": {
                    "$ref": "#/components/schemas/vehicleType"
                  }
                },
                "required": [
                  "deliveryId",
                  "orderId",
                  "billedDistance",
                  "emittedCarbonDioxide",
                  "vehicleType"
                ]
              },
              "examples": {
                "Exemple": {
                  "value": {
                    "deliveryId": "654eg65ze4g65z",
                    "externalReference": "564654-FT",
                    "orderId": "a54efa65e4a",
                    "billedDistance": {
                      "value": 56.85,
                      "unit": "m"
                    },
                    "emittedCarbonDioxide": {
                      "value": 12.3,
                      "unit": "g"
                    },
                    "vehicleType": "VEHICLE_TYPE_TRUCK"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Requête traitée avec succès"
          },
          "400": {
            "description": "Elements manquants et/ou incorrect dans le body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "Missing argument 'xxxxx'"
                      }
                    }
                  }
                },
                "examples": {
                  "Exemple": {
                    "value": {
                      "reasons": [
                        "Missing argument 'xxxxx'"
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "L'information ne peut plus être envoyée",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.v1.4.0.json#/components/schemas/errorCode"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Le 'orderId' n'a pas été trouvé",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.v1.4.0.json#/components/schemas/errorCode"
                },
                "examples": {
                  "example": {
                    "value": {
                      "statusCode": 404,
                      "error": "Not Found",
                      "message": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Recevoir les informations de facturation pour une livraison"
      }
    },
    "/orders/{orderId}/events": {
      "post": {
        "tags": [
          "Commande"
        ],
        "operationId": "postOrderEvents",
        "description": "Cette méthode permet de recevoir les évènements liés à une commande. Toutes les notifications envoyées au client seront transmises à l'enseigne: Raisons d'échec, date d'envoi et contenu de la notification. \n\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathOrderId"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Contient les informations de l'évenement.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "boolean",
                    "description": "Indique si l'événement à été envoyé correctement au client"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "EVENT_TYPE_SMS",
                      "EVENT_TYPE_MAIL",
                      "EVENT_TYPE_CALL"
                    ],
                    "description": "Type de l'évènement"
                  },
                  "date": {
                    "type": "string",
                    "format": "datetime",
                    "description": "Date de l’événement"
                  },
                  "subject": {
                    "type": "string",
                    "enum": [
                      "TECHNICAL_DELIVERY_PICKUP_SOON",
                      "DELIVERY_INIT",
                      "DELIVERY_STARTED",
                      "DELIVERY_PICK_UP_REACHED",
                      "DELIVERY_PICK_UP_OK",
                      "DELIVERY_IN_PROGRESS",
                      "DELIVERY_AT_DROP_OF_LOCATION",
                      "DELIVERY_PICK_UP_FAILED",
                      "DELIVERY_DELIVERED_WITH_CLAIM",
                      "DELIVERY_CANCELLED_WITH_RETURN",
                      "DELIVERY_FAILED_WITH_RETURN",
                      "DELIVERY_RETURNED_TO_PICK_UP",
                      "DELIVERY_DELIVERED_OK",
                      "DELIVERY_CANCELLED",
                      "DELIVERY_BLOCKED",
                      "DELIVERY_DELAYED",
                      "DELIVERY_AVAILABLE"
                    ],
                    "description": "Sujet de l'évènement"
                  },
                  "message": {
                    "type": "string",
                    "description": "Message envoyé au client"
                  },
                  "failReason": {
                    "type": "string",
                    "description": "Motif de l'échec si status est false"
                  },
                  "sender": {
                    "type": "string",
                    "description": "Expéditeur"
                  }
                },
                "required": [
                  "status",
                  "type",
                  "date",
                  "subject",
                  "message",
                  "sender"
                ]
              },
              "examples": {
                "Exemple": {
                  "value": {
                    "status": true,
                    "type": "EVENT_TYPE_MAIL",
                    "date": "2019-11-27T12:00:00+0000",
                    "subject": "DELIVERY_DELAYED",
                    "message": "Je vais avoir 15min de retard.",
                    "sender": "sender@mail.fr"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Requête traitée avec succès"
          },
          "400": {
            "description": "Elements manquants et/ou incorrect dans le body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "Missing argument 'xxxxx'"
                      }
                    }
                  }
                },
                "examples": {
                  "Exemple": {
                    "value": {
                      "reasons": [
                        "Missing argument 'xxxxx'"
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "L'information ne peut plus être envoyée",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.v1.4.0.json#/components/schemas/errorCode"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "statusCode": 0,
                      "error": "string",
                      "message": "string",
                      "reasons": [
                        "STORE_NOT_FOUND"
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Le 'orderId' n'a pas été trouvé",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.v1.4.0.json#/components/schemas/errorCode"
                },
                "examples": {
                  "example": {
                    "value": {
                      "statusCode": 404,
                      "error": "Not Found",
                      "message": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Recevoir les événements pour une commande donnée"
      }
    },
    "/orders/{orderId}/deltaCosts": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orderId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Recevoir les deltaCosts du transporteur",
        "operationId": "postOrderDeltaCosts",
        "responses": {
          "204": {
            "description": "Requête traitée avec succès"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "Missing argument 'xxxxx'"
                      }
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "reasons": [
                        "Missing argument 'xxxxx'"
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.v1.4.0.json#/components/schemas/errorCode"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.v1.4.0.json#/components/schemas/errorCode"
                }
              }
            }
          }
        },
        "description": "Cette méthode permet de recevoir les informations de deltaCost émis par le transporteur sur la commande lors de la livraison. Ces données peuvent être de type; Frais supplémentaire et/ou remise sur la livraison. ",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "",
                "type": "object",
                "properties": {
                  "deliveryId": {
                    "type": "string",
                    "description": "Identifiant de livraison"
                  },
                  "externalReference": {
                    "type": "string",
                    "description": "Référence de commmande"
                  },
                  "orderId": {
                    "type": "string",
                    "description": "Identifiant de commande"
                  },
                  "amount": {
                    "type": "number",
                    "description": "Montant des frais indiqués par le transporteur."
                  },
                  "currency": {
                    "$ref": "#/components/schemas/currency"
                  },
                  "reason": {
                    "$ref": "#/components/schemas/deltaCostReason"
                  },
                  "comment": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Commentaire libre laissé par le transporteur. "
                  },
                  "date": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Date de l'évènement enregistré. "
                  }
                },
                "required": [
                  "deliveryId",
                  "orderId",
                  "amount",
                  "currency",
                  "reason",
                  "comment",
                  "date"
                ]
              },
              "examples": {
                "Annulation tardive": {
                  "value": {
                    "deliveryId": "056d12bb-7b53-46b8-980e-2c430fd9b4d3",
                    "externalReference": "056d12bb-7b53-46b8-980e-2c430fd9b4d3",
                    "orderId": "1d0297b0-be4e-409f-8179-b253",
                    "amount": 165.98,
                    "currency": "EUR",
                    "reason": "DELTACOST_LATE_CANCELLATION",
                    "comment": "Commande annulée 5min avant livraison.",
                    "date": "2019-11-27T10:30:00+0000"
                  }
                }
              }
            }
          },
          "description": "Contient les informations relatives aux deltaCosts. "
        },
        "tags": [
          "Commande"
        ]
      }
    },
    "/orders/{orderId}/quotes": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orderId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Recevoir l'ensemble des devis d'une commande",
        "operationId": "postOrderQuotes",
        "responses": {
          "200": {
            "description": "Requête traitée avec succès"
          },
          "400": {
            "description": "Elements manquants et/ou incorrect dans le body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reasons": {
                      "type": "string",
                      "example": "Missing argument 'xxxxx'"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.v1.4.0.json#/components/schemas/errorCode"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.v1.4.0.json#/components/schemas/errorCode"
                }
              }
            }
          }
        },
        "description": "Cette méthode permet de recevoir l'ensemble des devis émis aux transporteurs pour la création d'une expédition. Les devis seront retournés à l'enseigne à titre informatif. ",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "",
                "minItems": 1,
                "uniqueItems": true,
                "items": {
                  "$ref": "#/components/schemas/getQuote"
                }
              },
              "examples": {
                "example": {
                  "value": [
                    {
                      "quoteId": "string",
                      "price": {
                        "value": 0,
                        "currency": "string"
                      },
                      "vehicleType": "string",
                      "carrierName": "string",
                      "reasons": [
                        "REFUSED_TOO_HEAVY"
                      ],
                      "comment": "string"
                    }
                  ]
                }
              }
            }
          },
          "description": "Contient les informations des devis transporteurs."
        },
        "tags": [
          "Commande"
        ]
      }
    },
    "/collects/{collectId}/status": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "collectId",
          "in": "path",
          "required": true
        }
      ],
      "put": {
        "summary": "Recevoir les mises à jour de statut de collecte",
        "operationId": "put-collects-collectId-status",
        "responses": {
          "204": {
            "description": "Requête traitée avec succès"
          },
          "400": {
            "description": "Elements manquants et/ou incorrect dans le body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "L'information ne peut plus être envoyée",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.v1.4.0.json#/components/schemas/errorCode"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Le 'collectId' n'a pas été trouvé",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.v1.4.0.json#/components/schemas/errorCode"
                }
              }
            }
          }
        },
        "description": "Cette méthode permet à l’enseigne de recevoir les informations de statut sur la commande de Click & Collect. L’enseigne pourra alors suivre en temps réel l’évolution de la collecte du client dans le temps. ",
        "parameters": [],
        "tags": [
          "Collecte"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "",
                "type": "object",
                "properties": {
                  "collectId": {
                    "type": "string",
                    "minLength": 1
                  },
                  "date": {
                    "type": "string",
                    "minLength": 1,
                    "format": "date-time"
                  },
                  "status": {
                    "$ref": "./retailer_to_woop.v1.4.0.json#/components/schemas/collectStatus"
                  },
                  "slot": {
                    "$ref": "./retailer_to_woop.v1.4.0.json#/components/schemas/slot"
                  },
                  "additionalData": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/additionalData"
                    }
                  }
                },
                "required": [
                  "collectId",
                  "date",
                  "status"
                ]
              },
              "examples": {
                "Créneau validé": {
                  "value": {
                    "collectId": "CN123456789FR59",
                    "date": "2019-08-24T14:15:22Z",
                    "status": "COLLECT_STARTED",
                    "slot": {
                      "start": "2019-05-02T15:00:00+0000",
                      "end": "2019-05-02T15:30:00+0000"
                    }
                  }
                },
                "Créneau modifié par le client": {
                  "value": {
                    "collectId": "CN123456789FR59",
                    "date": "2019-08-24T14:15:22Z",
                    "status": "COLLECT_REPLANNED",
                    "slot": {
                      "start": "2019-05-02T15:00:00+0000",
                      "end": "2019-05-02T15:30:00+0000"
                    }
                  }
                },
                "Client arrivé en magasin": {
                  "value": {
                    "collectId": "CN123456789FR59",
                    "date": "2019-08-24T14:15:22Z",
                    "status": "COLLECT_AWAITING",
                    "slot": {
                      "start": "2019-05-02T15:00:00+0000",
                      "end": "2019-05-02T15:30:00+0000"
                    },
                    "additionalData": {
                      "key": "space",
                      "value": "A32"
                    }
                  }
                }
              }
            }
          },
          "description": "Contient les informations du changement de statut."
        }
      }
    }
  },
  "components": {
    "schemas": {
      "score": {
        "title": "Note de livraison (score)",
        "type": "object",
        "x-examples": {
          "Exemple": {
            "note": 5,
            "type": "SCORE_TYPE_RECOMMENDATION",
            "includedInCarrierScore": true
          }
        },
        "description": "Précise la note obtenue de la part du client final pour la livraison effectuée et si elle est inclue dans le calcul de la note transporteur. ",
        "properties": {
          "note": {
            "type": "number",
            "description": "Note"
          },
          "type": {
            "type": "string",
            "enum": [
              "SCORE_TYPE_RECOMMENDATION",
              "SCORE_TYPE_SATISFACTION"
            ],
            "description": "Type de note"
          },
          "includedInCarrierScore": {
            "type": "boolean",
            "description": "Inclus dans la note transporteur"
          }
        },
        "required": [
          "note",
          "type",
          "includedInCarrierScore"
        ]
      },
      "contact": {
        "title": "Contact (contact)",
        "type": "object",
        "x-examples": {
          "Exemple": {
            "firstName": "John",
            "lastName": "Doe",
            "phone": "+33610101010",
            "email": "johndoe@mail.com"
          }
        },
        "description": "Informations de contact de livraison/prélèvement.",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "Prénom"
          },
          "lastName": {
            "type": "string",
            "description": "Nom"
          },
          "phone": {
            "type": "string",
            "description": "Téléphone"
          },
          "email": {
            "type": "string",
            "description": "Email"
          }
        },
        "required": [
          "phone",
          "email"
        ]
      },
      "orderStatus": {
        "type": "string",
        "enum": [
          "ORDER_CREATED",
          "ORDER_UPDATED",
          "ORDER_TO_BE_COMPLETED",
          "ORDER_WITH_NO_CARRIER_ELIGIBLE",
          "ORDER_TO_BE_QUOTED",
          "ORDER_QUOTED",
          "ORDER_WITH_NO_QUOTE",
          "ORDER_QUOTE_TO_BE_CONFIRMED",
          "ORDER_TO_BE_SENT_TO_CARRIER",
          "ORDER_WITH_NO_CARRIER_AVAILABLE",
          "ORDER_REFUSED_DELIVERY",
          "ORDER_TO_DELIVER",
          "ORDER_BEING_DELIVERED",
          "ORDER_DELIVERY_UNCOMPLETED",
          "ORDER_DELIVERED",
          "ORDER_CANCELLED"
        ],
        "title": "Statut de commande (orderStatus)",
        "description": "Précise le statut d'une commande.",
        "x-examples": {
          "Exemple": "ORDER_CREATED"
        }
      },
      "deliveryStatus": {
        "type": "string",
        "enum": [
          "DELIVERY_STARTED",
          "DELIVERY_PICK_UP_REACHED",
          "DELIVERY_PICK_UP_OK",
          "DELIVERY_PICK_UP_PARTIALLY",
          "DELIVERY_IN_PROGRESS",
          "DELIVERY_AT_DROP_OF_LOCATION",
          "DELIVERY_PICK_UP_FAILED",
          "DELIVERY_DELIVERED_WITH_CLAIM",
          "DELIVERY_CANCELLED_WITH_RETURN",
          "DELIVERY_FAILED_WITH_RETURN",
          "DELIVERY_RETURNED_TO_PICK_UP",
          "DELIVERY_DELIVERED_OK",
          "DELIVERY_DELIVERED_PARTIALLY",
          "DELIVERY_REPLANNED"
        ],
        "title": "Statut de livraison (deliveryStatus)",
        "x-examples": {
          "Exemple": "DELIVERY_STARTED"
        },
        "description": "Précise le statut de livraison pouvant être utilisé."
      },
      "length": {
        "title": "Dimension (length)",
        "x-examples": {
          "Exemple": {
            "value": 200,
            "unit": "mm"
          }
        },
        "type": "object",
        "description": "Précise la dimension d'un colis.",
        "properties": {
          "value": {
            "type": "number",
            "format": "float"
          },
          "unit": {
            "$ref": "#/components/schemas/lengthUnit"
          }
        },
        "required": [
          "value",
          "unit"
        ]
      },
      "mass": {
        "required": [
          "value",
          "unit"
        ],
        "properties": {
          "value": {
            "type": "number",
            "format": "float"
          },
          "unit": {
            "$ref": "#/components/schemas/massUnit"
          }
        },
        "title": "Poids (mass)",
        "x-examples": {
          "Exemple": {
            "value": 1,
            "unit": "kg"
          }
        },
        "description": "Précise le poids d'un colis/produit."
      },
      "lengthUnit": {
        "type": "string",
        "description": "Précise l'unité de mesure pour les dimensions.",
        "enum": [
          "mm",
          "cm",
          "m",
          "in",
          "ft-us",
          "ft",
          "mi"
        ],
        "title": "Unité de mesure (lengthUnit)",
        "x-examples": {
          "Exemple": "mm"
        }
      },
      "massUnit": {
        "description": "Précise l'unité de poids.",
        "enum": [
          "mcg",
          "mg",
          "g",
          "kg",
          "oz",
          "lb",
          "mt",
          "t"
        ],
        "title": "Unité de poids (massUnit)",
        "x-examples": {
          "Exemple": "mcg"
        },
        "type": "string"
      },
      "vehicleType": {
        "type": "string",
        "enum": [
          "VEHICLE_TYPE_BIKE",
          "VEHICLE_TYPE_SCOOTER",
          "VEHICLE_TYPE_E_SCOOTER",
          "VEHICLE_TYPE_VAN_SMALL",
          "VEHICLE_TYPE_E_VAN_SMALL",
          "VEHICLE_TYPE_VAN_MEDIUM",
          "VEHICLE_TYPE_PEDESTRIAN",
          "VEHICLE_TYPE_TRUCK",
          "VEHICLE_TYPE_VAN_BIG",
          "VEHICLE_TYPE_E_VAN_BIG",
          "VEHICLE_TYPE_BIKE_CARGO",
          "VEHICLE_TYPE_CAR",
          "VEHICLE_TYPE_E_CAR",
          "VEHICLE_TYPE_UNKNOWN"
        ],
        "title": "Type de véhicule de transport (vehicleType)",
        "x-examples": {
          "Exemple": "VEHICLE_TYPE_BIKE"
        },
        "description": "Précise le type de véhicule utilisé pour le transport. "
      },
      "currency": {
        "type": "string",
        "description": "Devise, précise la monnaie utilisée.",
        "enum": [
          "EUR"
        ],
        "title": "Devise (currency)",
        "x-examples": {
          "Exemple": "EUR"
        }
      },
      "team": {
        "type": "object",
        "properties": {
          "members": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          }
        },
        "title": "Équipe (team)",
        "x-examples": {
          "Exemple": {
            "members": [
              {
                "id": "176867"
              }
            ]
          }
        },
        "description": "Informations de l'équipe ayant contribué à la livraison."
      },
      "price": {
        "title": "Prix (price)",
        "x-examples": {
          "Exemple": {
            "value": 20,
            "currency": "EUR"
          }
        },
        "type": "object",
        "description": "Précise le prix d'achât du produit. ",
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "description": "valeur"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          }
        },
        "required": [
          "value",
          "currency"
        ]
      },
      "carrier": {
        "title": "Transporteur (carrier)",
        "x-examples": {
          "Exemple": {
            "name": "Bpost",
            "code": "bpost",
            "contact": {
              "firstName": "John",
              "lastName": "Doe",
              "phone": "+33610101010",
              "email": "johndoe@mail.com"
            },
            "specifications": {
              "updateOrder": true,
              "cancelOrder": false,
              "carrierLabel": true,
              "storageCapacity": true,
              "weightMin": {
                "value": 5,
                "unit": "kg"
              },
              "weightMax": {
                "value": 50,
                "unit": "kg"
              },
              "ditanceMax": {
                "value": 5,
                "unit": "km"
              }
            }
          }
        },
        "type": "object",
        "description": "Précise les informations du transporteur.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Nom du transporteur"
          },
          "code": {
            "type": "string",
            "description": "Code du transporteur"
          },
          "contact": {
            "$ref": "#/components/schemas/contact"
          },
          "specifications": {
            "$ref": "#/components/schemas/specifications"
          }
        },
        "required": [
          "name",
          "code",
          "contact",
          "specifications"
        ]
      },
      "putDeliveryStatus": {
        "title": "Mise à jour de statut de livraison (putDeliveryStatus)",
        "type": "object",
        "description": "Mise à jour de statut de livraison.",
        "properties": {
          "deliveryId": {
            "type": "string",
            "description": "Identifiant de la livraison"
          },
          "orderId": {
            "type": "string",
            "description": "Identifiant de commande"
          },
          "status": {
            "$ref": "#/components/schemas/deliveryStatus"
          },
          "date": {
            "type": "string",
            "format": "datetime",
            "description": "Date de la modification"
          },
          "comment": {
            "type": "string",
            "description": "Commentaire libre"
          },
          "team": {
            "$ref": "#/components/schemas/team"
          },
          "additionalData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/additionalData"
            }
          },
          "appointment": {
            "$ref": "#/components/schemas/appointment"
          }
        },
        "required": [
          "deliveryId",
          "orderId",
          "status",
          "date",
          "comment"
        ]
      },
      "putOrderStatus": {
        "title": "Mise à jour du statut de la commande (putOrderStatus)",
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "description": "Identifiant de la commande"
          },
          "date": {
            "type": "string",
            "format": "datetime",
            "description": "Date de mise à jour"
          },
          "status": {
            "$ref": "#/components/schemas/orderStatus"
          }
        },
        "required": [
          "orderId",
          "date",
          "status"
        ],
        "description": "Mise à jour du statut de la commande.",
        "x-examples": {
          "example": {
            "orderId": "string",
            "date": "string",
            "status": "ORDER_CREATED"
          }
        }
      },
      "additionalData": {
        "title": "Données additionnelles (additionalData)",
        "type": "object",
        "description": "Permet de recevoir des informations/données personnalisées de la part du transporteur.",
        "properties": {
          "key": {
            "type": "string",
            "description": "Intitulé de l'information reçue"
          },
          "value": {
            "type": "string",
            "description": "Valeur de l'information"
          }
        },
        "required": [
          "key",
          "value"
        ],
        "x-examples": {
          "example": {
            "key": "string",
            "value": "string"
          }
        }
      },
      "appointment": {
        "description": "Précise un interval de dates avec heures pour la prise de RDV client.",
        "type": "object",
        "x-examples": {
          "example": {
            "start": "2019-05-02T15:52:01+0000",
            "end": "2019-05-02T17:52:01+0000"
          }
        },
        "properties": {
          "start": {
            "type": "string",
            "minLength": 1,
            "description": "Début du créneau"
          },
          "end": {
            "type": "string",
            "minLength": 1,
            "description": "Fin du créneau"
          }
        },
        "required": [
          "start",
          "end"
        ],
        "title": "Date de prise RDV (appointment)"
      },
      "specifications": {
        "description": "Liste des caractéristiques enregistrées pour un transporteur sur une commande.",
        "type": "object",
        "x-examples": {
          "example": {
            "updateOrder": true,
            "cancelOrder": true,
            "carrierLabel": true,
            "storageCapacity": true,
            "weightMin": {
              "value": 0,
              "unit": "string"
            },
            "weightMax": {
              "value": 0,
              "unit": "string"
            },
            "ditanceMax": {
              "value": 0,
              "unit": "string"
            }
          }
        },
        "title": "Caractéristiques (specifications)",
        "properties": {
          "updateOrder": {
            "type": "boolean",
            "description": "Indique si la modification de commande est autorisée"
          },
          "cancelOrder": {
            "type": "boolean",
            "description": "Indique si l'annulation de commande est autorisée"
          },
          "carrierLabel": {
            "type": "boolean",
            "description": "Indique si le transporteur possède une étiquette de transport"
          },
          "storageCapacity": {
            "type": "boolean",
            "description": "Indique si le transporteur possède une capacité de stockage"
          },
          "weightMin": {
            "$ref": "#/components/schemas/weight"
          },
          "weightMax": {
            "$ref": "#/components/schemas/weight"
          },
          "distanceMax": {
            "$ref": "#/components/schemas/distance"
          }
        },
        "required": [
          "updateOrder",
          "cancelOrder",
          "carrierLabel",
          "storageCapacity",
          "weightMin",
          "weightMax",
          "distanceMax"
        ]
      },
      "weight": {
        "description": "Précise le poids autorisé",
        "type": "object",
        "properties": {
          "value": {
            "type": "number"
          },
          "unit": {
            "$ref": "#/components/schemas/massUnit"
          }
        },
        "required": [
          "value",
          "unit"
        ],
        "x-examples": {
          "example": {
            "value": 5,
            "unit": "kg"
          }
        },
        "title": "Poids (weight)"
      },
      "distance": {
        "description": "Précise la distance entre deux points.",
        "type": "object",
        "x-examples": {
          "exemple": {
            "value": 5,
            "unit": "km"
          }
        },
        "title": "Distance (distance)",
        "properties": {
          "value": {
            "type": "number"
          },
          "unit": {
            "$ref": "#/components/schemas/distanceUnit"
          }
        },
        "required": [
          "value",
          "unit"
        ]
      },
      "distanceUnit": {
        "type": "string",
        "title": "Unité de distance (distanceUnit)",
        "x-examples": {
          "Exemple": "string"
        },
        "description": "Précise l'unité de mesure pour le calcul de distance.",
        "enum": [
          "m",
          "km"
        ]
      },
      "deltaCostReason": {
        "type": "string",
        "title": "Raison de deltaCost (deltaCostReason)",
        "description": "Précise la raison remontée par le transporteur pour la création d'un deltaCost sur une commande.  ",
        "x-examples": {
          "example": "DELTACOST_EXTEND_WAITING_WAREHOUSE"
        },
        "enum": [
          "DELTACOST_EXTEND_WAITING_WAREHOUSE",
          "DELTACOST_EXTEND_WAITING_CUSTOMER",
          "DELTACOST_WRONG_FLOOR",
          "DELTACOST_WRONG_CONTENT",
          "DELTACOST_WAREHOUSE_RETURN",
          "DELTACOST_LATE_CANCELLATION",
          "DELTACOST_PICKUP_FAILED",
          "DELTACOST_PARTIALLY_DELIVERED",
          "DELTACOST_UNKNOWN"
        ]
      },
      "priceQuote": {
        "description": "Correspond au prix du devis",
        "type": "object",
        "title": "Prix du devis (priceQuote)",
        "x-examples": {
          "example": {
            "value": 0,
            "currency": "string"
          }
        },
        "properties": {
          "value": {
            "type": "number",
            "description": "Valeur indicative du prix"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          }
        },
        "required": [
          "value",
          "currency"
        ]
      },
      "getQuote": {
        "description": "Ensemble des devis émis par les transporteurs lors de la demande de création de commande. ",
        "type": "object",
        "x-examples": {
          "example": {
            "quoteId": "string",
            "price": {
              "value": 0,
              "currency": "string"
            },
            "vehicleType": "string",
            "carrierName": "string",
            "reasons": [
              "REFUSED_TOO_HEAVY"
            ],
            "comment": "string"
          }
        },
        "title": "Informations des devis transporteurs (getQuote)",
        "properties": {
          "quoteId": {
            "type": "string",
            "minLength": 1
          },
          "price": {
            "$ref": "#/components/schemas/priceQuote"
          },
          "vehicleType": {
            "$ref": "#/components/schemas/vehicleType"
          },
          "carrierName": {
            "type": "string",
            "minLength": 1
          },
          "reasons": {
            "type": "array",
            "uniqueItems": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/refusedReason"
            }
          },
          "comment": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": [
          "quoteId",
          "price",
          "vehicleType",
          "carrierName",
          "reasons",
          "comment"
        ]
      },
      "refusedReason": {
        "type": "string",
        "title": "Motif de refus (refusedReason)",
        "description": "Précise les raisons de refus possible d'un devis. ",
        "x-examples": {
          "example": "REFUSED_AREA"
        },
        "enum": [
          "REFUSED_AREA",
          "REFUSED_AVAILABILITY",
          "REFUSED_DAY_OFF",
          "REFUSED_EXCEPTION",
          "REFUSED_TIME_NOT_WORKED",
          "REFUSED_TOO_HEAVY",
          "REFUSED_TOO_LARGE"
        ]
      },
      "scoreComment": {
        "title": "Commentaires sur la livraison (scoreComment)",
        "type": "object",
        "x-examples": {
          "Exemple": {
            "answer": "Pas de commentaires !",
            "question": "Avez-vous des suggestions à nous partager afin de nous aider à améliorer notre service de livraison ?"
          }
        },
        "description": "Champ libre pour les commentaires clients",
        "properties": {
          "answer": {
            "type": "string",
            "description": "Réponse apportée par le client final"
          },
          "question": {
            "type": "string",
            "description": "Question posée au client final"
          }
        },
        "required": [
          "answer",
          "question"
        ]
      }
    },
    "parameters": {
      "pathOrderId": {
        "in": "path",
        "description": "Identifiant de la commande",
        "name": "orderId",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    }
  },
  "servers": []
}